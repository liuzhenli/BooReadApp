package com.liuzhenli.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liuzhenli.write.bean.WriteChapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WRITE_CHAPTER".
*/
public class WriteChapterDao extends AbstractDao<WriteChapter, Void> {

    public static final String TABLENAME = "WRITE_CHAPTER";

    /**
     * Properties of entity WriteChapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property ChapterId = new Property(2, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ContentUrl = new Property(4, String.class, "contentUrl", false, "CONTENT_URL");
        public final static Property HtmlUrl = new Property(5, String.class, "htmlUrl", false, "HTML_URL");
        public final static Property WordCount = new Property(6, int.class, "wordCount", false, "WORD_COUNT");
        public final static Property ImageCount = new Property(7, int.class, "imageCount", false, "IMAGE_COUNT");
        public final static Property OrderValue = new Property(8, double.class, "orderValue", false, "ORDER_VALUE");
        public final static Property Published = new Property(9, int.class, "published", false, "PUBLISHED");
        public final static Property SyncChapterTime = new Property(10, long.class, "syncChapterTime", false, "SYNC_CHAPTER_TIME");
        public final static Property Timestamp = new Property(11, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property ModifyTime = new Property(12, long.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property ReleaseTime = new Property(13, long.class, "releaseTime", false, "RELEASE_TIME");
        public final static Property CreateTime = new Property(14, long.class, "createTime", false, "CREATE_TIME");
        public final static Property LocalBookId = new Property(15, long.class, "localBookId", false, "LOCAL_BOOK_ID");
        public final static Property LocalUploadFlag = new Property(16, int.class, "localUploadFlag", false, "LOCAL_UPLOAD_FLAG");
        public final static Property LocalDownloadFlag = new Property(17, int.class, "localDownloadFlag", false, "LOCAL_DOWNLOAD_FLAG");
        public final static Property LocalEditingFlag = new Property(18, int.class, "localEditingFlag", false, "LOCAL_EDITING_FLAG");
        public final static Property LocalPublishStatus = new Property(19, int.class, "localPublishStatus", false, "LOCAL_PUBLISH_STATUS");
        public final static Property LocalUpdateTime = new Property(20, long.class, "localUpdateTime", false, "LOCAL_UPDATE_TIME");
        public final static Property LocalDelete = new Property(21, int.class, "localDelete", false, "LOCAL_DELETE");
        public final static Property PublishTimeValue = new Property(22, long.class, "publishTimeValue", false, "PUBLISH_TIME_VALUE");
        public final static Property Attachments = new Property(23, String.class, "attachments", false, "ATTACHMENTS");
        public final static Property DraftWordCount = new Property(24, int.class, "draftWordCount", false, "DRAFT_WORD_COUNT");
        public final static Property DraftImageCount = new Property(25, int.class, "draftImageCount", false, "DRAFT_IMAGE_COUNT");
        public final static Property LastTag = new Property(26, String.class, "lastTag", false, "LAST_TAG");
        public final static Property Conflict_status = new Property(27, int.class, "conflict_status", false, "CONFLICT_STATUS");
        public final static Property ClientId = new Property(28, String.class, "clientId", false, "CLIENT_ID");
        public final static Property ContentTag = new Property(29, String.class, "contentTag", false, "CONTENT_TAG");
        public final static Property Drafted = new Property(30, boolean.class, "drafted", false, "DRAFTED");
    }


    public WriteChapterDao(DaoConfig config) {
        super(config);
    }
    
    public WriteChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WRITE_CHAPTER\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 1: bookId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 2: chapterId
                "\"TITLE\" TEXT," + // 3: title
                "\"CONTENT_URL\" TEXT," + // 4: contentUrl
                "\"HTML_URL\" TEXT," + // 5: htmlUrl
                "\"WORD_COUNT\" INTEGER NOT NULL ," + // 6: wordCount
                "\"IMAGE_COUNT\" INTEGER NOT NULL ," + // 7: imageCount
                "\"ORDER_VALUE\" REAL NOT NULL ," + // 8: orderValue
                "\"PUBLISHED\" INTEGER NOT NULL ," + // 9: published
                "\"SYNC_CHAPTER_TIME\" INTEGER NOT NULL ," + // 10: syncChapterTime
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 11: timestamp
                "\"MODIFY_TIME\" INTEGER NOT NULL ," + // 12: modifyTime
                "\"RELEASE_TIME\" INTEGER NOT NULL ," + // 13: releaseTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 14: createTime
                "\"LOCAL_BOOK_ID\" INTEGER NOT NULL ," + // 15: localBookId
                "\"LOCAL_UPLOAD_FLAG\" INTEGER NOT NULL ," + // 16: localUploadFlag
                "\"LOCAL_DOWNLOAD_FLAG\" INTEGER NOT NULL ," + // 17: localDownloadFlag
                "\"LOCAL_EDITING_FLAG\" INTEGER NOT NULL ," + // 18: localEditingFlag
                "\"LOCAL_PUBLISH_STATUS\" INTEGER NOT NULL ," + // 19: localPublishStatus
                "\"LOCAL_UPDATE_TIME\" INTEGER NOT NULL ," + // 20: localUpdateTime
                "\"LOCAL_DELETE\" INTEGER NOT NULL ," + // 21: localDelete
                "\"PUBLISH_TIME_VALUE\" INTEGER NOT NULL ," + // 22: publishTimeValue
                "\"ATTACHMENTS\" TEXT," + // 23: attachments
                "\"DRAFT_WORD_COUNT\" INTEGER NOT NULL ," + // 24: draftWordCount
                "\"DRAFT_IMAGE_COUNT\" INTEGER NOT NULL ," + // 25: draftImageCount
                "\"LAST_TAG\" TEXT," + // 26: lastTag
                "\"CONFLICT_STATUS\" INTEGER NOT NULL ," + // 27: conflict_status
                "\"CLIENT_ID\" TEXT," + // 28: clientId
                "\"CONTENT_TAG\" TEXT," + // 29: contentTag
                "\"DRAFTED\" INTEGER NOT NULL );"); // 30: drafted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WRITE_CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WriteChapter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(5, contentUrl);
        }
 
        String htmlUrl = entity.getHtmlUrl();
        if (htmlUrl != null) {
            stmt.bindString(6, htmlUrl);
        }
        stmt.bindLong(7, entity.getWordCount());
        stmt.bindLong(8, entity.getImageCount());
        stmt.bindDouble(9, entity.getOrderValue());
        stmt.bindLong(10, entity.getPublished());
        stmt.bindLong(11, entity.getSyncChapterTime());
        stmt.bindLong(12, entity.getTimestamp());
        stmt.bindLong(13, entity.getModifyTime());
        stmt.bindLong(14, entity.getReleaseTime());
        stmt.bindLong(15, entity.getCreateTime());
        stmt.bindLong(16, entity.getLocalBookId());
        stmt.bindLong(17, entity.getLocalUploadFlag());
        stmt.bindLong(18, entity.getLocalDownloadFlag());
        stmt.bindLong(19, entity.getLocalEditingFlag());
        stmt.bindLong(20, entity.getLocalPublishStatus());
        stmt.bindLong(21, entity.getLocalUpdateTime());
        stmt.bindLong(22, entity.getLocalDelete());
        stmt.bindLong(23, entity.getPublishTimeValue());
 
        String attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(24, attachments);
        }
        stmt.bindLong(25, entity.getDraftWordCount());
        stmt.bindLong(26, entity.getDraftImageCount());
 
        String lastTag = entity.getLastTag();
        if (lastTag != null) {
            stmt.bindString(27, lastTag);
        }
        stmt.bindLong(28, entity.getConflict_status());
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(29, clientId);
        }
 
        String contentTag = entity.getContentTag();
        if (contentTag != null) {
            stmt.bindString(30, contentTag);
        }
        stmt.bindLong(31, entity.getDrafted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WriteChapter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(5, contentUrl);
        }
 
        String htmlUrl = entity.getHtmlUrl();
        if (htmlUrl != null) {
            stmt.bindString(6, htmlUrl);
        }
        stmt.bindLong(7, entity.getWordCount());
        stmt.bindLong(8, entity.getImageCount());
        stmt.bindDouble(9, entity.getOrderValue());
        stmt.bindLong(10, entity.getPublished());
        stmt.bindLong(11, entity.getSyncChapterTime());
        stmt.bindLong(12, entity.getTimestamp());
        stmt.bindLong(13, entity.getModifyTime());
        stmt.bindLong(14, entity.getReleaseTime());
        stmt.bindLong(15, entity.getCreateTime());
        stmt.bindLong(16, entity.getLocalBookId());
        stmt.bindLong(17, entity.getLocalUploadFlag());
        stmt.bindLong(18, entity.getLocalDownloadFlag());
        stmt.bindLong(19, entity.getLocalEditingFlag());
        stmt.bindLong(20, entity.getLocalPublishStatus());
        stmt.bindLong(21, entity.getLocalUpdateTime());
        stmt.bindLong(22, entity.getLocalDelete());
        stmt.bindLong(23, entity.getPublishTimeValue());
 
        String attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(24, attachments);
        }
        stmt.bindLong(25, entity.getDraftWordCount());
        stmt.bindLong(26, entity.getDraftImageCount());
 
        String lastTag = entity.getLastTag();
        if (lastTag != null) {
            stmt.bindString(27, lastTag);
        }
        stmt.bindLong(28, entity.getConflict_status());
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(29, clientId);
        }
 
        String contentTag = entity.getContentTag();
        if (contentTag != null) {
            stmt.bindString(30, contentTag);
        }
        stmt.bindLong(31, entity.getDrafted() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WriteChapter readEntity(Cursor cursor, int offset) {
        WriteChapter entity = new WriteChapter( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bookId
            cursor.getLong(offset + 2), // chapterId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contentUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // htmlUrl
            cursor.getInt(offset + 6), // wordCount
            cursor.getInt(offset + 7), // imageCount
            cursor.getDouble(offset + 8), // orderValue
            cursor.getInt(offset + 9), // published
            cursor.getLong(offset + 10), // syncChapterTime
            cursor.getLong(offset + 11), // timestamp
            cursor.getLong(offset + 12), // modifyTime
            cursor.getLong(offset + 13), // releaseTime
            cursor.getLong(offset + 14), // createTime
            cursor.getLong(offset + 15), // localBookId
            cursor.getInt(offset + 16), // localUploadFlag
            cursor.getInt(offset + 17), // localDownloadFlag
            cursor.getInt(offset + 18), // localEditingFlag
            cursor.getInt(offset + 19), // localPublishStatus
            cursor.getLong(offset + 20), // localUpdateTime
            cursor.getInt(offset + 21), // localDelete
            cursor.getLong(offset + 22), // publishTimeValue
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // attachments
            cursor.getInt(offset + 24), // draftWordCount
            cursor.getInt(offset + 25), // draftImageCount
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // lastTag
            cursor.getInt(offset + 27), // conflict_status
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // clientId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // contentTag
            cursor.getShort(offset + 30) != 0 // drafted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WriteChapter entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setChapterId(cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContentUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHtmlUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWordCount(cursor.getInt(offset + 6));
        entity.setImageCount(cursor.getInt(offset + 7));
        entity.setOrderValue(cursor.getDouble(offset + 8));
        entity.setPublished(cursor.getInt(offset + 9));
        entity.setSyncChapterTime(cursor.getLong(offset + 10));
        entity.setTimestamp(cursor.getLong(offset + 11));
        entity.setModifyTime(cursor.getLong(offset + 12));
        entity.setReleaseTime(cursor.getLong(offset + 13));
        entity.setCreateTime(cursor.getLong(offset + 14));
        entity.setLocalBookId(cursor.getLong(offset + 15));
        entity.setLocalUploadFlag(cursor.getInt(offset + 16));
        entity.setLocalDownloadFlag(cursor.getInt(offset + 17));
        entity.setLocalEditingFlag(cursor.getInt(offset + 18));
        entity.setLocalPublishStatus(cursor.getInt(offset + 19));
        entity.setLocalUpdateTime(cursor.getLong(offset + 20));
        entity.setLocalDelete(cursor.getInt(offset + 21));
        entity.setPublishTimeValue(cursor.getLong(offset + 22));
        entity.setAttachments(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDraftWordCount(cursor.getInt(offset + 24));
        entity.setDraftImageCount(cursor.getInt(offset + 25));
        entity.setLastTag(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setConflict_status(cursor.getInt(offset + 27));
        entity.setClientId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setContentTag(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDrafted(cursor.getShort(offset + 30) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WriteChapter entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WriteChapter entity) {
        return null;
    }

    @Override
    public boolean hasKey(WriteChapter entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
