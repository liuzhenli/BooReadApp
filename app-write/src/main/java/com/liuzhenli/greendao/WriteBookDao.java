package com.liuzhenli.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liuzhenli.write.bean.WriteBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WRITE_BOOK".
*/
public class WriteBookDao extends AbstractDao<WriteBook, Long> {

    public static final String TABLENAME = "WRITE_BOOK";

    /**
     * Properties of entity WriteBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, long.class, "bookId", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Summary = new Property(2, String.class, "summary", false, "SUMMARY");
        public final static Property Recommendation = new Property(3, String.class, "recommendation", false, "RECOMMENDATION");
        public final static Property CoverUrl = new Property(4, String.class, "coverUrl", false, "COVER_URL");
        public final static Property TagWords = new Property(5, String.class, "tagWords", false, "TAG_WORDS");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
        public final static Property LastChapterId = new Property(7, int.class, "lastChapterId", false, "LAST_CHAPTER_ID");
        public final static Property WordCount = new Property(8, int.class, "wordCount", false, "WORD_COUNT");
        public final static Property ImageCount = new Property(9, int.class, "imageCount", false, "IMAGE_COUNT");
        public final static Property ChapterCount = new Property(10, int.class, "chapterCount", false, "CHAPTER_COUNT");
        public final static Property Finished = new Property(11, int.class, "finished", false, "FINISHED");
        public final static Property MagnumOpusFlag = new Property(12, int.class, "magnumOpusFlag", false, "MAGNUM_OPUS_FLAG");
        public final static Property ModifyTime = new Property(13, long.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property CreateTime = new Property(14, long.class, "createTime", false, "CREATE_TIME");
        public final static Property OrderType = new Property(15, int.class, "orderType", false, "ORDER_TYPE");
        public final static Property Outline = new Property(16, int.class, "outline", false, "OUTLINE");
        public final static Property ViewType = new Property(17, int.class, "viewType", false, "VIEW_TYPE");
    }


    public WriteBookDao(DaoConfig config) {
        super(config);
    }
    
    public WriteBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WRITE_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: bookId
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"SUMMARY\" TEXT," + // 2: summary
                "\"RECOMMENDATION\" TEXT," + // 3: recommendation
                "\"COVER_URL\" TEXT," + // 4: coverUrl
                "\"TAG_WORDS\" TEXT," + // 5: tagWords
                "\"CATEGORY\" TEXT," + // 6: category
                "\"LAST_CHAPTER_ID\" INTEGER NOT NULL ," + // 7: lastChapterId
                "\"WORD_COUNT\" INTEGER NOT NULL ," + // 8: wordCount
                "\"IMAGE_COUNT\" INTEGER NOT NULL ," + // 9: imageCount
                "\"CHAPTER_COUNT\" INTEGER NOT NULL ," + // 10: chapterCount
                "\"FINISHED\" INTEGER NOT NULL ," + // 11: finished
                "\"MAGNUM_OPUS_FLAG\" INTEGER NOT NULL ," + // 12: magnumOpusFlag
                "\"MODIFY_TIME\" INTEGER NOT NULL ," + // 13: modifyTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 14: createTime
                "\"ORDER_TYPE\" INTEGER NOT NULL ," + // 15: orderType
                "\"OUTLINE\" INTEGER NOT NULL ," + // 16: outline
                "\"VIEW_TYPE\" INTEGER NOT NULL );"); // 17: viewType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WRITE_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WriteBook entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookId());
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String recommendation = entity.getRecommendation();
        if (recommendation != null) {
            stmt.bindString(4, recommendation);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(5, coverUrl);
        }
 
        String tagWords = entity.getTagWords();
        if (tagWords != null) {
            stmt.bindString(6, tagWords);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
        stmt.bindLong(8, entity.getLastChapterId());
        stmt.bindLong(9, entity.getWordCount());
        stmt.bindLong(10, entity.getImageCount());
        stmt.bindLong(11, entity.getChapterCount());
        stmt.bindLong(12, entity.getFinished());
        stmt.bindLong(13, entity.getMagnumOpusFlag());
        stmt.bindLong(14, entity.getModifyTime());
        stmt.bindLong(15, entity.getCreateTime());
        stmt.bindLong(16, entity.getOrderType());
        stmt.bindLong(17, entity.getOutline());
        stmt.bindLong(18, entity.getViewType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WriteBook entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookId());
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String recommendation = entity.getRecommendation();
        if (recommendation != null) {
            stmt.bindString(4, recommendation);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(5, coverUrl);
        }
 
        String tagWords = entity.getTagWords();
        if (tagWords != null) {
            stmt.bindString(6, tagWords);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
        stmt.bindLong(8, entity.getLastChapterId());
        stmt.bindLong(9, entity.getWordCount());
        stmt.bindLong(10, entity.getImageCount());
        stmt.bindLong(11, entity.getChapterCount());
        stmt.bindLong(12, entity.getFinished());
        stmt.bindLong(13, entity.getMagnumOpusFlag());
        stmt.bindLong(14, entity.getModifyTime());
        stmt.bindLong(15, entity.getCreateTime());
        stmt.bindLong(16, entity.getOrderType());
        stmt.bindLong(17, entity.getOutline());
        stmt.bindLong(18, entity.getViewType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WriteBook readEntity(Cursor cursor, int offset) {
        WriteBook entity = new WriteBook( //
            cursor.getLong(offset + 0), // bookId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // summary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recommendation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tagWords
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category
            cursor.getInt(offset + 7), // lastChapterId
            cursor.getInt(offset + 8), // wordCount
            cursor.getInt(offset + 9), // imageCount
            cursor.getInt(offset + 10), // chapterCount
            cursor.getInt(offset + 11), // finished
            cursor.getInt(offset + 12), // magnumOpusFlag
            cursor.getLong(offset + 13), // modifyTime
            cursor.getLong(offset + 14), // createTime
            cursor.getInt(offset + 15), // orderType
            cursor.getInt(offset + 16), // outline
            cursor.getInt(offset + 17) // viewType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WriteBook entity, int offset) {
        entity.setBookId(cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecommendation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTagWords(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastChapterId(cursor.getInt(offset + 7));
        entity.setWordCount(cursor.getInt(offset + 8));
        entity.setImageCount(cursor.getInt(offset + 9));
        entity.setChapterCount(cursor.getInt(offset + 10));
        entity.setFinished(cursor.getInt(offset + 11));
        entity.setMagnumOpusFlag(cursor.getInt(offset + 12));
        entity.setModifyTime(cursor.getLong(offset + 13));
        entity.setCreateTime(cursor.getLong(offset + 14));
        entity.setOrderType(cursor.getInt(offset + 15));
        entity.setOutline(cursor.getInt(offset + 16));
        entity.setViewType(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WriteBook entity, long rowId) {
        entity.setBookId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WriteBook entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WriteBook entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
